package com.crud.alpha.clase.Viaje;

import com.crud.alpha.clase.Localidad.Localidad;
import com.crud.alpha.clase.Omnibus.Omnibus;
import com.crud.alpha.clase.Pasaje.Pasaje;
import com.crud.alpha.clase.Usuarios.Vendedor.Vendedor;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;


//Modelado de la clase y tabla usuarios, @Tabla le da el nombre a la tabla, los demas @ nos ahorran declarar los getters
//Setters y constructor vacio y con argumentos.
// el @Id establece que atributo va a ser la clave primaria y el Identity hace que cada nuevo ID autogenerado sea el siguiente del anterior.

@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "Viaje")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Viaje {
// Importante no nombrar atributos utilizando '_' (piso/barra baja)

    // *** Autogenerated
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // *** Manual

    @Column(nullable = false)
    private LocalDate fecha;

    @Column(nullable = false)
    private LocalTime hora_partida;

    @Column(nullable = false)
    private LocalTime hora_llegada;

    @Column(nullable = false)
    private boolean cerrado;

    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;



    // Fk tabla y relacion con Omnibus

    @ManyToOne
    @JoinColumn(nullable = false,name = "id_Omnibus_Asignado", referencedColumnName = "id") // id es la PK de Omnibus
    private Omnibus omnibusAsignado;

    // Fk tabla y relacion con Vendedor

    @ManyToOne
    @JoinColumn(name = "registered_by", referencedColumnName = "clerkId") // esta columna estar√° en la tabla Omnibus
    private Vendedor registeredBy;


    // FK tabla y relacion con Localidad // PENSADO PARA LOCALIDAD DONDE INICIA EL VIAJE

    @ManyToOne
    @JoinColumn(nullable = false,name = "localidad_Inicial", referencedColumnName = "nombre")
    // id es la PK de Localidad
    private Localidad localidadInicial;


    // FK tabla y relacion con Localidad // PENSADO PARA LOCALIDAD DONDE FINALIZA EL VIAJE

    @ManyToOne
    @JoinColumn(nullable = false,name = "localidad_Final", referencedColumnName = "nombre") // id es la PK de Localidad
    private Localidad localidadFinal;

    // ** FK Tabla y relacion con Pasaje

    @OneToMany(mappedBy = "id", fetch = FetchType.LAZY)
    private List<Pasaje> RegistroPasaje = new ArrayList<>();

}