package com.crud.alpha.clase.Omnibus;

import com.crud.alpha.clase.Pasaje.Pasaje;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;
import java.util.List;


//Modelado de la clase y tabla usuarios, @Tabla le da el nombre a la tabla, los demas @ nos ahorran declarar los getters
//Setters y constructor vacio y con argumentos.
// el @Id establece que atributo va a ser la clave primaria y el Identity hace que cada nuevo ID autogenerado sea el siguiente del anterior.

@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "Asiento")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Asiento {
// Importante no nombrar atributos utilizando '_' (piso/barra baja)

    // *** Autogenerated
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // No se bien como declarar una ID que identifique al asiento .
    private Long id;                                    // en el contexto que una ID deberia ser unica y hay multiples asientos "iguales" por cada bus.
                                                        // ta bien asi :thumbsup: pensalo como un SKU jjja
    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;

    // *** Manual
    @Column(nullable = false)
    private int numero;

    // *** FK Tabla y relacion con Omnibus
    @ManyToOne
    @JoinColumn(name = "nroCoche", referencedColumnName ="nroCoche") // esta columna estar√° en la tabla Omnibus
    private Omnibus omnibus;

    // *** Fk Tabla y relacion con Pasaje
    @OneToMany(mappedBy = "asiento")
    private List<Pasaje> pasajes;
}